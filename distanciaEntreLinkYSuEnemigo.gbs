program{
    return(
        distanciaEntreLinkYSuEnemigo()
    )
}
 
function distanciaEntreLinkYSuEnemigo(){
    /*
    Proposito: Describir la distancia entre link y su enemigo.
    Precondicion: Debe existir un enemigo en una direccion desde la celda actual y 
    no debe haber ningun obstaculo entre ellos (Link y su Enemigo).
    Tipo: Numero
    Observaciones: Se realiza un recorrido en las 4 direcciones para asi poder determinar 
    en que direccion se encuentra el enemigo y asi poder determinar su distancia desde donde 
    se encuentra ubicado Link
    */
    distancia := 0
    direccion := minDir()
    while(direccion /= maxDir()){
        if(hayEnemigosEnLaVisionDeLinkHacia_(direccion)){
            distancia := distanciaHaciaEnemigoAl_(direccion)
        }
        direccion := siguiente(direccion)
    }
    if(hayEnemigosEnLaVisionDeLinkHacia_(direccion)){
        distancia := distanciaHaciaEnemigoAl_(direccion)
    }  
    return(distancia)
} 

function distanciaHaciaEnemigoAl_(direccion){
    /*
    Proposito: Describir la distancia al enemigo
    Precondicion: Debe existir un enemigo al "direccion"
    y no puede haber ningun obstaculo en esa direccion
    Tipo: Numero
    Parametro: direccion: Direccion
    */
    distanciaEntreLinkYSuEnemigo := 0;
    while(not hayEnemigosDeLink()){
        Mover(direccion)
        distanciaEntreLinkYSuEnemigo := distanciaEntreLinkYSuEnemigo + 1
    } 
    return(distanciaEntreLinkYSuEnemigo)
}

function hayEnemigosEnLaVisionDeLinkHacia_(direccion){
    /*
    Proposito: indica si hay un enemigo en el campo de vision de 
    link, no debe haber ningun obstaculo al "direccion" para que
    pueda verlo.
    Precondicion: el cabezal debe estar sobre link
    Parametros: direccion: Direccion
    Tipo: Booleano
    Observaciones: Los enemigos se representan con bolitas Rojas
    y los obstaculos con bolitas Azules
    */
    while(puedeMover(direccion)  && not hayObstaculo() && 
        not hayEnemigosDeLink()){
        Mover(direccion)
    }
    return(
        hayEnemigosDeLink()
    ) 
}

function hayObstaculo(){
    return (hayBolitas(Azul))
}

function hayEnemigosDeLink(){
    return (hayBolitas(Rojo))
}
